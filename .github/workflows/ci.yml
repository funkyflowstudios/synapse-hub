name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Python Tests
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    defaults:
      run:
        working-directory: ./rpi-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run backend tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Test health verification script
        run: |
          python scripts/verify_health.py --help

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./rpi-backend/coverage.xml
          flags: backend

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: |
          npm run test:unit
          npm run lint
          npm run check

      - name: Build frontend
        run: npm run build

  # Cursor Connector Tests
  cursor-connector-tests:
    name: Cursor Connector Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
    defaults:
      run:
        working-directory: ./cursor-connector

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run cursor connector tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml

      - name: Test automation modules
        run: |
          python -m pytest tests/test_automation/ -v

  # Quality and Security Checks
  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd rpi-backend && pip install -r requirements.txt
          cd ../cursor-connector && pip install -r requirements.txt

      - name: Run security scan
        run: |
          npm audit --audit-level=moderate

      - name: Python security scan
        run: |
          pip install safety bandit
          cd rpi-backend && safety check
          cd ../cursor-connector && safety check

      - name: Code quality check
        run: |
          npm run lint

      - name: Python code quality
        run: |
          pip install flake8 black isort
          cd rpi-backend && flake8 app/ --max-line-length=88 --extend-ignore=E203
          cd ../cursor-connector && flake8 src/ --max-line-length=88 --extend-ignore=E203

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      sqlite:
        image: alpine:latest
        options: --health-cmd "echo 'healthy'" --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd rpi-backend && pip install -r requirements.txt

      - name: Start backend server
        run: |
          cd rpi-backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run health check verification
        run: |
          cd rpi-backend
          python scripts/verify_health.py

      - name: Test API endpoints
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/ || exit 1

      - name: Run E2E tests
        run: |
          npm run test:e2e:ci

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          npm run perf:test

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check documentation links
        run: |
          npm run docs:check || echo "Documentation check completed with warnings"

      - name: Validate README
        run: |
          grep -q "Health Monitoring" README.md || exit 1
          grep -q "Cursor Connector" README.md || exit 1

  # Release Check
  release-check:
    name: Release Readiness Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      [backend-tests, frontend-tests, cursor-connector-tests, quality-checks, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          grep -q "0.1.0" CHANGELOG.md || exit 1
          grep -q "0.1.0" README.md || exit 1

      - name: Validate release readiness
        run: |
          echo "âœ… All tests passed"
          echo "âœ… Quality checks completed"
          echo "âœ… Integration tests successful"
          echo "ðŸš€ Ready for v0.1.0 release"
